import React, { useState, useEffect } from 'react';
import {
  Card,
  Form,
  Input,
  Button,
  message,
  Spin,
  Tabs,
  Space,
  Typography,
  Alert,
  Divider,
  Row,
  Col
} from 'antd';
import {
  SettingOutlined,
  SaveOutlined,
  ReloadOutlined,
  LockOutlined,
  UnlockOutlined,
  DollarOutlined,
  InfoCircleOutlined
} from '@ant-design/icons';
import { adminService } from '../services/adminService';

const { Title, Text } = Typography;
const { TextArea } = Input;

const AdminSystemSettings = () => {
  const [loading, setLoading] = useState(false);
  const [settings, setSettings] = useState({});
  const [form] = Form.useForm();

  useEffect(() => {
    loadSettings();
  }, []);

  const loadSettings = async () => {
    setLoading(true);
    try {
      const response = await adminService.getAllSystemSettings();
      if (response.success) {
        // Convert array to object by settingKey
        const settingsMap = {};
        response.data.forEach(setting => {
          settingsMap[setting.settingKey] = setting.settingValue;
        });
        setSettings(settingsMap);
        form.setFieldsValue(settingsMap);
      }
    } catch (error) {
      message.error('L·ªói khi t·∫£i c√†i ƒë·∫∑t: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  const handleSaveSetting = async (settingKey, settingValue, description, category) => {
    try {
      setLoading(true);
      const response = await adminService.createOrUpdateSystemSetting({
        settingKey,
        settingValue,
        description,
        category
      });
      
      if (response.success) {
        message.success('C·∫≠p nh·∫≠t c√†i ƒë·∫∑t th√†nh c√¥ng!');
        loadSettings();
      }
    } catch (error) {
      message.error('L·ªói: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  const handleSaveWithdrawalSettings = (values) => {
    handleSaveSetting(
      'default_withdrawal_lock_reason',
      values.default_withdrawal_lock_reason,
      'L√Ω do m·∫∑c ƒë·ªãnh khi kh√≥a r√∫t ti·ªÅn c·ªßa ng∆∞·ªùi d√πng',
      'WITHDRAWAL'
    );
  };

  const handleSaveAmountSettings = (values) => {
    // Save multiple settings
    Promise.all([
      handleSaveSetting(
        'min_withdrawal_amount',
        values.min_withdrawal_amount,
        'S·ªë ti·ªÅn r√∫t t·ªëi thi·ªÉu',
        'WITHDRAWAL'
      ),
      handleSaveSetting(
        'max_withdrawal_amount',
        values.max_withdrawal_amount,
        'S·ªë ti·ªÅn r√∫t t·ªëi ƒëa',
        'WITHDRAWAL'
      ),
      handleSaveSetting(
        'min_deposit_amount',
        values.min_deposit_amount,
        'S·ªë ti·ªÅn n·∫°p t·ªëi thi·ªÉu',
        'DEPOSIT'
      ),
      handleSaveSetting(
        'max_deposit_amount',
        values.max_deposit_amount,
        'S·ªë ti·ªÅn n·∫°p t·ªëi ƒëa',
        'DEPOSIT'
      )
    ]);
  };

  const handleInitializeDefaults = async () => {
    try {
      setLoading(true);
      const response = await adminService.initializeDefaultSettings();
      if (response.success) {
        message.success('Kh·ªüi t·∫°o c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh th√†nh c√¥ng!');
        loadSettings();
      }
    } catch (error) {
      message.error('L·ªói: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <Title level={2} className="mb-0">
            <SettingOutlined className="mr-2" />
            C√†i ƒë·∫∑t h·ªá th·ªëng
          </Title>
          <Text type="secondary">
            Qu·∫£n l√Ω c√°c c√†i ƒë·∫∑t v√† t√πy ch·ªânh h·ªá th·ªëng
          </Text>
        </div>
        <Space>
          <Button icon={<ReloadOutlined />} onClick={loadSettings} loading={loading}>
            L√†m m·ªõi
          </Button>
          <Button 
            type="default"
            onClick={handleInitializeDefaults} 
            loading={loading}
          >
            Kh·ªüi t·∫°o m·∫∑c ƒë·ªãnh
          </Button>
        </Space>
      </div>

      <Spin spinning={loading}>
        <Tabs 
          defaultActiveKey="withdrawal" 
          type="card"
          items={[
            {
              key: 'withdrawal',
              label: (
                <span>
                  <LockOutlined />
                  Qu·∫£n l√Ω kh√≥a r√∫t ti·ªÅn
                </span>
              ),
              children: (
                <Card>
                  <Alert
                    message="Qu·∫£n l√Ω kh√≥a r√∫t ti·ªÅn cho t·ª´ng ng∆∞·ªùi d√πng"
                    description="T√≠nh nƒÉng n√†y cho ph√©p admin kh√≥a r√∫t ti·ªÅn cho t·ª´ng ng∆∞·ªùi d√πng c·ª• th·ªÉ v·ªõi l√Ω do ri√™ng bi·ªát. ƒê·ªÉ kh√≥a r√∫t ti·ªÅn, h√£y v√†o m·ª•c 'Qu·∫£n l√Ω ng∆∞·ªùi d√πng' v√† click v√†o bi·ªÉu t∆∞·ª£ng kh√≥a."
                    type="info"
                    icon={<InfoCircleOutlined />}
                    showIcon
                    className="mb-6"
                  />

                  <div className="space-y-4">
                    <div className="bg-blue-50 p-4 rounded-lg">
                      <Title level={4} className="text-blue-800 mb-2">
                        <LockOutlined className="mr-2" />
                        H∆∞·ªõng d·∫´n kh√≥a r√∫t ti·ªÅn
                      </Title>
                      <div className="space-y-2 text-blue-700">
                        <p>1. V√†o m·ª•c <strong>"Qu·∫£n l√Ω ng∆∞·ªùi d√πng"</strong> trong menu b√™n tr√°i</p>
                        <p>2. T√¨m ng∆∞·ªùi d√πng c·∫ßn kh√≥a r√∫t ti·ªÅn</p>
                        <p>3. Click v√†o bi·ªÉu t∆∞·ª£ng <strong>üîí</strong> trong c·ªôt "Thao t√°c"</p>
                        <p>4. Nh·∫≠p l√Ω do kh√≥a r√∫t ti·ªÅn c·ª• th·ªÉ cho ng∆∞·ªùi d√πng ƒë√≥</p>
                        <p>5. Click <strong>"Kh√≥a r√∫t ti·ªÅn"</strong> ƒë·ªÉ x√°c nh·∫≠n</p>
                      </div>
                    </div>

                    <div className="bg-green-50 p-4 rounded-lg">
                      <Title level={4} className="text-green-800 mb-2">
                        <UnlockOutlined className="mr-2" />
                        H∆∞·ªõng d·∫´n m·ªü kh√≥a r√∫t ti·ªÅn
                      </Title>
                      <div className="space-y-2 text-green-700">
                        <p>1. V√†o m·ª•c <strong>"Qu·∫£n l√Ω ng∆∞·ªùi d√πng"</strong></p>
                        <p>2. T√¨m ng∆∞·ªùi d√πng ƒë√£ b·ªã kh√≥a (c√≥ tag ƒë·ªè "Kh√≥a r√∫t")</p>
                        <p>3. Click v√†o bi·ªÉu t∆∞·ª£ng <strong>üîì</strong> ƒë·ªÉ m·ªü kh√≥a ngay l·∫≠p t·ª©c</p>
                        <p>4. Kh√¥ng c·∫ßn nh·∫≠p l√Ω do khi m·ªü kh√≥a</p>
                      </div>
                    </div>

                    <div className="bg-yellow-50 p-4 rounded-lg">
                      <Title level={4} className="text-yellow-800 mb-2">
                        <InfoCircleOutlined className="mr-2" />
                        L∆∞u √Ω quan tr·ªçng
                      </Title>
                      <div className="space-y-2 text-yellow-700">
                        <p>‚Ä¢ L√Ω do kh√≥a r√∫t ti·ªÅn s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã cho ng∆∞·ªùi d√πng khi h·ªç c·ªë g·∫Øng r√∫t ti·ªÅn</p>
                        <p>‚Ä¢ M·ªói ng∆∞·ªùi d√πng c√≥ th·ªÉ c√≥ l√Ω do kh√≥a r√∫t ti·ªÅn kh√°c nhau</p>
                        <p>‚Ä¢ Admin c√≥ th·ªÉ xem l√Ω do kh√≥a r√∫t ti·ªÅn trong chi ti·∫øt ng∆∞·ªùi d√πng</p>
                        <p>‚Ä¢ Vi·ªác kh√≥a/m·ªü kh√≥a r√∫t ti·ªÅn s·∫Ω ƒë∆∞·ª£c ghi nh·∫≠n th·ªùi gian</p>
                      </div>
                    </div>
                  </div>
                </Card>
              )
            },
            {
              key: 'amounts',
              label: (
                <span>
                  <DollarOutlined />
                  Gi·ªõi h·∫°n s·ªë ti·ªÅn
                </span>
              ),
              children: (
                <Card>
                  <Form
                    form={form}
                    layout="vertical"
                    onFinish={handleSaveAmountSettings}
                  >
                    <Title level={4}>C√†i ƒë·∫∑t r√∫t ti·ªÅn</Title>
                    <Row gutter={16}>
                      <Col xs={24} sm={12}>
                        <Form.Item
                          name="min_withdrawal_amount"
                          label="S·ªë ti·ªÅn r√∫t t·ªëi thi·ªÉu (VNƒê)"
                          rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn' }]}
                        >
                          <Input 
                            type="number"
                            placeholder="50000"
                            addonBefore="‚Ç´"
                          />
                        </Form.Item>
                      </Col>
                      <Col xs={24} sm={12}>
                        <Form.Item
                          name="max_withdrawal_amount"
                          label="S·ªë ti·ªÅn r√∫t t·ªëi ƒëa (VNƒê)"
                          rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn' }]}
                        >
                          <Input 
                            type="number"
                            placeholder="50000000"
                            addonBefore="‚Ç´"
                          />
                        </Form.Item>
                      </Col>
                    </Row>

                    <Divider />

                    <Title level={4}>C√†i ƒë·∫∑t n·∫°p ti·ªÅn</Title>
                    <Row gutter={16}>
                      <Col xs={24} sm={12}>
                        <Form.Item
                          name="min_deposit_amount"
                          label="S·ªë ti·ªÅn n·∫°p t·ªëi thi·ªÉu (VNƒê)"
                          rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn' }]}
                        >
                          <Input 
                            type="number"
                            placeholder="50000"
                            addonBefore="‚Ç´"
                          />
                        </Form.Item>
                      </Col>
                      <Col xs={24} sm={12}>
                        <Form.Item
                          name="max_deposit_amount"
                          label="S·ªë ti·ªÅn n·∫°p t·ªëi ƒëa (VNƒê)"
                          rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn' }]}
                        >
                          <Input 
                            type="number"
                            placeholder="100000000"
                            addonBefore="‚Ç´"
                          />
                        </Form.Item>
                      </Col>
                    </Row>

                    <Form.Item>
                      <Button 
                        type="primary" 
                        htmlType="submit" 
                        icon={<SaveOutlined />}
                        loading={loading}
                      >
                        L∆∞u t·∫•t c·∫£ c√†i ƒë·∫∑t
                      </Button>
                    </Form.Item>
                  </Form>
                </Card>
              )
            }
          ]}
        />
      </Spin>
    </div>
  );
};

export default AdminSystemSettings;

